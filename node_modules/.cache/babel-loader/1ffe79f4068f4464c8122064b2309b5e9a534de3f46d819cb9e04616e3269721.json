{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport axios from 'axios';\n//import \"./Deck.css\";\n\nconst BASE_URL = \"https://deckofcardsapi.com/api/deck\";\nfunction Deck() {\n  _s();\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [isShuffling, setIsShuffling] = useState(false);\n  useEffect(function loadDeck() {\n    async function fetchData() {\n      const d = await axios.get(\"\".concat(BASE_URL, \"/new/shuffle/\"));\n      setDeck(d.data);\n    }\n    fetchData();\n  }, []);\n  async function draw() {\n    try {\n      const drawRes = await axios.get(\"\".concat(BASE_URL, \"/\").concat(deck.deck_id, \"/draw\"));\n      if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n      const card = drawRes.data.cards[0];\n      setDrawn(d => [...d, {\n        id: card.code,\n        name: card.suit + \" \" + card.value,\n        image: card.image\n      }]);\n    } catch (err) {\n      alert(err);\n    }\n  }\n}\n_s(Deck, \"rJFNjGw4xcuVBrPVYhrDVDJI900=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useState","useEffect","Card","axios","BASE_URL","Deck","_s","deck","setDeck","drawn","setDrawn","isShuffling","setIsShuffling","loadDeck","fetchData","d","get","concat","data","draw","drawRes","deck_id","remaining","Error","card","cards","id","code","name","suit","value","image","err","alert","_c","$RefreshReg$"],"sources":["/Users/graciafourie/Downloads/card-deck-react/src/Deck.js"],"sourcesContent":["import React, { useState, useEffect, } from \"react\";\nimport Card from \"./Card\";\nimport axios from 'axios';\n//import \"./Deck.css\";\n\nconst BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n\nfunction Deck() {\n    const [deck, setDeck] = useState(null);\n    const [drawn, setDrawn] = useState([]);\n    const [isShuffling, setIsShuffling] = useState(false);\n\n    useEffect(function loadDeck() {\n        async function fetchData() {\n            const d = await axios.get(`${BASE_URL}/new/shuffle/`);\n            setDeck(d.data);\n        }\n        fetchData();\n    }, []);\n\n    async function draw() {\n        try {\n            const drawRes = await axios.get(`${BASE_URL}/${deck.deck_id}/draw`);\n\n            if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\")\n\n            const card = drawRes.data.cards[0];\n\n            setDrawn(d => [\n                ...d,\n                {\n                    id: card.code,\n                    name: card.suit + \" \" + card.value,\n                    image: card.image\n                },\n            ]);\n        } catch (err) {\n            alert (err);\n        }\n    }\n}\n\nexport default Deck"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAS,OAAO;AACnD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB;;AAEA,MAAMC,QAAQ,GAAG,qCAAqC;AAEtD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,SAASY,QAAQA,CAAA,EAAG;IAC1B,eAAeC,SAASA,CAAA,EAAG;MACvB,MAAMC,CAAC,GAAG,MAAMZ,KAAK,CAACa,GAAG,IAAAC,MAAA,CAAIb,QAAQ,kBAAe,CAAC;MACrDI,OAAO,CAACO,CAAC,CAACG,IAAI,CAAC;IACnB;IACAJ,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeK,IAAIA,CAAA,EAAG;IAClB,IAAI;MACA,MAAMC,OAAO,GAAG,MAAMjB,KAAK,CAACa,GAAG,IAAAC,MAAA,CAAIb,QAAQ,OAAAa,MAAA,CAAIV,IAAI,CAACc,OAAO,UAAO,CAAC;MAEnE,IAAID,OAAO,CAACF,IAAI,CAACI,SAAS,KAAK,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;MAEhE,MAAMC,IAAI,GAAGJ,OAAO,CAACF,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC;MAElCf,QAAQ,CAACK,CAAC,IAAI,CACV,GAAGA,CAAC,EACJ;QACIW,EAAE,EAAEF,IAAI,CAACG,IAAI;QACbC,IAAI,EAAEJ,IAAI,CAACK,IAAI,GAAG,GAAG,GAAGL,IAAI,CAACM,KAAK;QAClCC,KAAK,EAAEP,IAAI,CAACO;MAChB,CAAC,CACJ,CAAC;IACN,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVC,KAAK,CAAED,GAAG,CAAC;IACf;EACJ;AACJ;AAAC1B,EAAA,CAjCQD,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAmCb,eAAeA,IAAI;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}